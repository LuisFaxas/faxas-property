name: Security Tests

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'app/api/**'
      - 'lib/api/**'
      - '__tests__/security/**'
      - 'prisma/schema.prisma'
      - '.github/workflows/security-tests.yml'
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - 'app/api/**'
      - 'lib/api/**'
      - '__tests__/security/**'
      - 'prisma/schema.prisma'

jobs:
  security-tests:
    name: Run Security Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Setup Environment
        run: |
          echo "DATABASE_URL=postgresql://testuser:testpass@localhost:5432/testdb" >> .env.test
          echo "NEXT_PUBLIC_FIREBASE_API_KEY=test-api-key" >> .env.test
          echo "NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=test.firebaseapp.com" >> .env.test
          echo "NEXT_PUBLIC_FIREBASE_PROJECT_ID=test-project" >> .env.test
          echo "FIREBASE_ADMIN_PROJECT_ID=test-project" >> .env.test
          echo "FIREBASE_ADMIN_CLIENT_EMAIL=test@test.iam.gserviceaccount.com" >> .env.test
          echo "FIREBASE_ADMIN_PRIVATE_KEY=\"-----BEGIN PRIVATE KEY-----\ntest\n-----END PRIVATE KEY-----\"" >> .env.test
          echo "NODE_ENV=test" >> .env.test

      - name: Generate Prisma Client
        run: npx prisma generate
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb

      - name: Push Database Schema
        run: npx prisma db push
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb

      - name: Run Security Tests
        run: npm run test:security:ci
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb

      - name: Upload Coverage Reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: coverage/

      - name: Comment PR with Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            const coverage = fs.existsSync('coverage/coverage-summary.json') 
              ? JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'))
              : null;
            
            let comment = '## üîí Security Test Results\n\n';
            
            if (coverage) {
              const total = coverage.total;
              comment += '### Coverage Summary\n';
              comment += `- Lines: ${total.lines.pct}%\n`;
              comment += `- Statements: ${total.statements.pct}%\n`;
              comment += `- Functions: ${total.functions.pct}%\n`;
              comment += `- Branches: ${total.branches.pct}%\n`;
            }
            
            comment += '\n### Test Categories\n';
            comment += '- ‚úÖ IDOR (Cross-tenant access prevention)\n';
            comment += '- ‚úÖ RBAC (Role-based access control)\n';
            comment += '- ‚úÖ Firebase token validation\n';
            comment += '- ‚úÖ Rate limiting\n';
            comment += '- ‚úÖ Data protection & audit logging\n';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Security Test Status Check
        if: failure()
        run: |
          echo "‚ùå Security tests failed! Please review the test output above."
          exit 1

  dependency-check:
    name: Check Dependencies for Vulnerabilities
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Check for outdated dependencies
        run: npm outdated
        continue-on-error: true