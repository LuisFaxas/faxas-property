generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id
  email     String   @unique
  role      Role
  createdAt DateTime @default(now())
  tasks     Task[]   @relation("AssignedTasks")
}

model Project {
  id            String             @id @default(cuid())
  name          String
  status        String
  createdAt     DateTime           @default(now())
  
  // New fields for comprehensive project management
  description   String?
  projectType   ProjectType        @default(RENOVATION)
  startDate     DateTime?
  targetEndDate DateTime?
  actualEndDate DateTime?
  address       String?
  siteDetails   String?
  totalBudget   Decimal?           @db.Decimal(12, 2)
  contingency   Decimal?           @db.Decimal(5, 2)
  managerId     String?
  clientName    String?
  clientEmail   String?
  clientPhone   String?
  permitNumbers String[]
  timezone      String             @default("America/New_York")
  workingHours  Json?
  settings      Json?
  isArchived    Boolean            @default(false)
  isFavorite    Boolean            @default(false)
  color         String?
  icon          String?
  updatedAt     DateTime           @default(now()) @updatedAt
  
  // Relations
  budgets       BudgetItem[]
  contacts      Contact[]
  decisions     Decision[]
  invoices      Invoice[]
  meetings      Meeting[]
  plans         PlanFile[]
  procurement   Procurement[]
  risks         Risk[]
  schedule      ScheduleEvent[]
  tasks         Task[]
  access        UserModuleAccess[]
}

model Contact {
  id           String        @id @default(cuid())
  projectId    String
  name         String
  company      String?
  specialty    String?
  category     String
  referredById String?
  status       String
  emails       String[]
  phones       String[]
  notes        String?
  userId       String?
  project      Project       @relation(fields: [projectId], references: [id])
  procurements Procurement[]
}

model Task {
  id                String    @id @default(cuid())
  projectId         String
  title             String
  description       String?
  status            String
  dueDate           DateTime?
  assignedToId      String?
  relatedContactIds String[]
  createdAt         DateTime  @default(now())
  assignedTo        User?     @relation("AssignedTasks", fields: [assignedToId], references: [id])
  project           Project   @relation(fields: [projectId], references: [id])

  @@index([projectId, status, dueDate])
}

model ScheduleEvent {
  id                String         @id @default(cuid())
  projectId         String
  title             String
  type              ScheduleType
  start             DateTime
  end               DateTime?
  status            ScheduleStatus
  googleEventId     String?
  replied           Boolean        @default(false)
  notes             String?
  requesterUserId   String?
  relatedContactIds String[]
  createdAt         DateTime       @default(now())
  project           Project        @relation(fields: [projectId], references: [id])

  @@index([projectId, start(sort: Desc)])
}

model BudgetItem {
  id              String        @id @default(cuid())
  projectId       String
  discipline      String
  category        String
  item            String
  unit            String?
  qty             Decimal       @default(0) @db.Decimal(12, 2)
  estUnitCost     Decimal       @default(0) @db.Decimal(12, 2)
  estTotal        Decimal       @default(0) @db.Decimal(12, 2)
  committedTotal  Decimal       @default(0) @db.Decimal(12, 2)
  paidToDate      Decimal       @default(0) @db.Decimal(12, 2)
  vendorContactId String?
  status          BudgetStatus
  variance        Decimal       @default(0) @db.Decimal(6, 4)
  project         Project       @relation(fields: [projectId], references: [id])
  procurements    Procurement[]

  @@index([projectId, discipline, status])
}

model Procurement {
  id              String            @id @default(cuid())
  projectId       String
  materialItem    String
  quantity        Decimal           @db.Decimal(12, 2)
  discipline      String
  phase           String
  requiredBy      DateTime
  leadTimeDays    Int
  supplierId      String?
  orderStatus     ProcurementStatus @default(DRAFT)
  eta             DateTime?
  notes           String?
  budgetItemId    String?
  actualDelivery  DateTime?
  approvedAt      DateTime?
  approvedBy      String?
  attachments     String[]          @default([])
  category        String?
  createdAt       DateTime          @default(now())
  createdBy       String?
  description     String?
  invoiceNumber   String?
  poNumber        String?           @unique
  priority        String?           @default("MEDIUM")
  rejectedAt      DateTime?
  rejectedBy      String?
  rejectionReason String?
  requestedAt     DateTime?
  requestedBy     String?
  tags            String[]          @default([])
  totalCost       Decimal?          @db.Decimal(12, 2)
  trackingNumber  String?
  unit            String?
  unitPrice       Decimal?          @db.Decimal(12, 2)
  updatedAt       DateTime          @updatedAt
  updatedBy       String?
  budgetItem      BudgetItem?       @relation(fields: [budgetItemId], references: [id])
  project         Project           @relation(fields: [projectId], references: [id])
  supplier        Contact?          @relation(fields: [supplierId], references: [id])

  @@index([projectId, requiredBy, orderStatus])
  @@index([poNumber])
  @@index([supplierId])
  @@index([budgetItemId])
}

model PlanFile {
  id            String   @id @default(cuid())
  projectId     String
  category      String
  storagePath   String
  version       String
  dateIssued    DateTime
  notes         String?
  sharedWithIds String[]
  createdAt     DateTime @default(now())
  project       Project  @relation(fields: [projectId], references: [id])
}

model Decision {
  id             String   @id @default(cuid())
  projectId      String
  topic          String
  options        String[]
  decision       String
  date           DateTime
  ownerUserId    String
  rationale      String?
  followUpNeeded Boolean  @default(false)
  project        Project  @relation(fields: [projectId], references: [id])
}

model Risk {
  id            String   @id @default(cuid())
  projectId     String
  description   String
  category      String
  probability   Decimal  @db.Decimal(6, 4)
  impactCost    Decimal? @db.Decimal(12, 2)
  impactDays    Int?
  impactQuality Int?
  score         Decimal  @db.Decimal(12, 4)
  mitigation    String?
  trigger       String?
  status        String
  project       Project  @relation(fields: [projectId], references: [id])

  @@index([projectId, status, score(sort: Desc)])
}

model Meeting {
  id                    String    @id @default(cuid())
  projectId             String
  date                  DateTime
  participantContactIds String[]
  type                  String
  agenda                String?
  notes                 String?
  decisionIds           String[]
  actionTaskIds         String[]
  nextMeetingDate       DateTime?
  project               Project   @relation(fields: [projectId], references: [id])
}

model Invoice {
  id               String        @id @default(cuid())
  projectId        String
  contractorUserId String
  contactId        String
  budgetItemId     String?
  amount           Decimal       @db.Decimal(12, 2)
  tax              Decimal?      @db.Decimal(12, 2)
  status           InvoiceStatus
  filePath         String
  notes            String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  paidAt           DateTime?
  project          Project       @relation(fields: [projectId], references: [id])
}

model UserModuleAccess {
  userId     String
  projectId  String
  module     Module
  canView    Boolean @default(false)
  canEdit    Boolean @default(false)
  canUpload  Boolean @default(false)
  canRequest Boolean @default(false)
  project    Project @relation(fields: [projectId], references: [id])

  @@id([userId, projectId, module])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  entity    String
  entityId  String
  meta      Json
  createdAt DateTime @default(now())
}

enum Role {
  ADMIN
  STAFF
  CONTRACTOR
  VIEWER
}

enum ScheduleType {
  CALL
  MEETING
  SITE_VISIT
  WORK
  EMAIL_FOLLOWUP
}

enum ScheduleStatus {
  REQUESTED
  PLANNED
  DONE
  CANCELED
  RESCHEDULE_NEEDED
}

enum BudgetStatus {
  BUDGETED
  COMMITTED
  PAID
}

enum ProcurementStatus {
  QUOTED
  ORDERED
  DELIVERED
  INSTALLED
  DRAFT
  APPROVED
  SHIPPED
  CANCELLED
}

enum InvoiceStatus {
  RECEIVED
  UNDER_REVIEW
  APPROVED
  PAID
  REJECTED
}

enum Module {
  TASKS
  SCHEDULE
  PLANS
  UPLOADS
  INVOICES
  PROCUREMENT_READ
  DOCS_READ
}

enum ProjectType {
  NEW_CONSTRUCTION
  RENOVATION
  ADDITION
  COMMERCIAL
  RESIDENTIAL
  MIXED_USE
}
