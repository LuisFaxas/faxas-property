generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String           @id
  email              String           @unique
  role               Role
  createdAt          DateTime         @default(now())
  contact            Contact?
  tasks              Task[]           @relation("AssignedTasks")
  projectMemberships ProjectMember[]
  vendorAccess       VendorUser[]
  preferences        UserPreferences?
}

model Project {
  id            String             @id @default(cuid())
  name          String
  status        String
  createdAt     DateTime           @default(now())
  actualEndDate DateTime?
  address       String?
  latitude      Float?
  longitude     Float?
  clientEmail   String?
  clientName    String?
  clientPhone   String?
  color         String?
  contingency   Decimal?           @db.Decimal(5, 2)
  description   String?
  icon          String?
  isArchived    Boolean            @default(false)
  isFavorite    Boolean            @default(false)
  managerId     String?
  permitNumbers String[]
  projectType   ProjectType        @default(RENOVATION)
  settings      Json?
  siteDetails   String?
  startDate     DateTime?
  targetEndDate DateTime?
  timezone      String             @default("America/New_York")
  totalBudget   Decimal?           @db.Decimal(12, 2)
  updatedAt     DateTime           @default(now()) @updatedAt
  workingHours  Json?
  budgets       BudgetItem[]
  contacts      Contact[]
  decisions     Decision[]
  invoices      Invoice[]
  meetings      Meeting[]
  plans         PlanFile[]
  procurement   Procurement[]
  risks         Risk[]
  schedule      ScheduleEvent[]
  tasks         Task[]
  access        UserModuleAccess[]
  members       ProjectMember[]
  rfps          Rfp[]
  vendors       Vendor[]
  workPackages  WorkPackage[]
  commitments   Commitment[]
}

model Contact {
  id             String        @id @default(cuid())
  projectId      String
  name           String
  company        String?
  specialty      String?
  category       String
  referredById   String?
  status         String
  emails         String[]
  phones         String[]
  notes          String?
  userId         String?       @unique
  createdAt      DateTime      @default(now())
  inviteExpiry   DateTime?
  inviteToken    String?       @unique
  lastActivityAt DateTime?
  lastLoginAt    DateTime?
  portalStatus   String        @default("NONE")
  updatedAt      DateTime      @default(now()) @updatedAt
  project        Project       @relation(fields: [projectId], references: [id])
  user           User?         @relation(fields: [userId], references: [id])
  procurements   Procurement[]
  assignedTasks  Task[]        @relation("ContactTasks")
  vendors        Vendor[]      @relation("ContactVendor")
  bidInvitations BidInvitation[]

  @@index([projectId, portalStatus])
  @@index([inviteToken])
}

model Task {
  id                 String                @id @default(cuid())
  projectId          String
  title              String
  description        String?
  dueDate            DateTime?
  assignedToId       String?
  relatedContactIds  String[]
  createdAt          DateTime              @default(now())
  actualHours        Float?
  completedAt        DateTime?
  customFields       Json?
  estimatedHours     Float?
  inspectionStatus   String?
  isMilestone        Boolean               @default(false)
  isOnCriticalPath   Boolean               @default(false)
  isRecurring        Boolean               @default(false)
  lastSyncedAt       DateTime?
  latitude           Float?
  localId            String?
  location           String?
  locationName       String?
  longitude          Float?
  mobileMetadata     Json?
  offlineCreated     Boolean               @default(false)
  parentTaskId       String?
  priority           TaskPriority          @default(MEDIUM)
  progressPercentage Int                   @default(0)
  quickTemplate      String?
  recurringPattern   String?
  requiresInspection Boolean               @default(false)
  startDate          DateTime?
  tags               String[]              @default([])
  thumbnailUrl       String?
  trade              String?
  updatedAt          DateTime              @updatedAt
  voiceNoteUrl       String?
  weatherDependent   Boolean               @default(false)
  status             TaskStatus            @default(TODO)
  assignedContactId  String?
  changeOrderLinks   ChangeOrderTaskLink[]
  rfiLinks           RFITaskLink[]
  submittalLinks     SubmittalTaskLink[]
  assignedContact    Contact?              @relation("ContactTasks", fields: [assignedContactId], references: [id])
  assignedTo         User?                 @relation("AssignedTasks", fields: [assignedToId], references: [id])
  parentTask         Task?                 @relation("TaskSubtasks", fields: [parentTaskId], references: [id])
  subtasks           Task[]                @relation("TaskSubtasks")
  project            Project               @relation(fields: [projectId], references: [id])
  activities         TaskActivity[]
  attachments        TaskAttachment[]
  checklistItems     TaskChecklistItem[]
  comments           TaskComment[]
  dependencies       TaskDependency[]      @relation("DependentTask")
  dependents         TaskDependency[]      @relation("PredecessorTask")
  photos             TaskPhoto[]
  watchers           TaskWatcher[]

  @@index([projectId, status, dueDate])
  @@index([projectId, assignedToId])
  @@index([projectId, isOnCriticalPath])
  @@index([parentTaskId])
}

model ScheduleEvent {
  id                String         @id @default(cuid())
  projectId         String
  title             String
  type              ScheduleType
  start             DateTime
  end               DateTime?
  status            ScheduleStatus
  googleEventId     String?
  replied           Boolean        @default(false)
  notes             String?
  requesterUserId   String?
  relatedContactIds String[]
  createdAt         DateTime       @default(now())
  project           Project        @relation(fields: [projectId], references: [id])

  @@index([projectId, start(sort: Desc)])
}

model BudgetItem {
  id              String        @id @default(cuid())
  projectId       String
  discipline      String
  category        String
  item            String
  unit            String?
  qty             Decimal       @default(0) @db.Decimal(12, 2)
  estUnitCost     Decimal       @default(0) @db.Decimal(12, 2)
  estTotal        Decimal       @default(0) @db.Decimal(12, 2)
  committedTotal  Decimal       @default(0) @db.Decimal(12, 2)
  paidToDate      Decimal       @default(0) @db.Decimal(12, 2)
  vendorContactId String?
  status          BudgetStatus
  variance        Decimal       @default(0) @db.Decimal(6, 4)
  project         Project       @relation(fields: [projectId], references: [id])
  procurements    Procurement[]
  workPackages    WorkPackage[]

  @@index([projectId, discipline, status])
}

model Procurement {
  id              String            @id @default(cuid())
  projectId       String
  materialItem    String
  quantity        Decimal           @db.Decimal(12, 2)
  discipline      String
  phase           String
  requiredBy      DateTime
  leadTimeDays    Int
  supplierId      String?
  orderStatus     ProcurementStatus @default(DRAFT)
  eta             DateTime?
  notes           String?
  budgetItemId    String?
  actualDelivery  DateTime?
  approvedAt      DateTime?
  approvedBy      String?
  attachments     String[]          @default([])
  category        String?
  createdAt       DateTime          @default(now())
  createdBy       String?
  description     String?
  invoiceNumber   String?
  poNumber        String?           @unique
  priority        String?           @default("MEDIUM")
  rejectedAt      DateTime?
  rejectedBy      String?
  rejectionReason String?
  requestedAt     DateTime?
  requestedBy     String?
  tags            String[]          @default([])
  totalCost       Decimal?          @db.Decimal(12, 2)
  trackingNumber  String?
  unit            String?
  unitPrice       Decimal?          @db.Decimal(12, 2)
  updatedAt       DateTime          @updatedAt
  updatedBy       String?
  budgetItem      BudgetItem?       @relation(fields: [budgetItemId], references: [id])
  project         Project           @relation(fields: [projectId], references: [id])
  supplier        Contact?          @relation(fields: [supplierId], references: [id])

  @@index([projectId, requiredBy, orderStatus])
  @@index([poNumber])
  @@index([supplierId])
  @@index([budgetItemId])
}

model PlanFile {
  id            String   @id @default(cuid())
  projectId     String
  category      String
  storagePath   String
  version       String
  dateIssued    DateTime
  notes         String?
  sharedWithIds String[]
  createdAt     DateTime @default(now())
  project       Project  @relation(fields: [projectId], references: [id])
}

model Decision {
  id             String   @id @default(cuid())
  projectId      String
  topic          String
  options        String[]
  decision       String
  date           DateTime
  ownerUserId    String
  rationale      String?
  followUpNeeded Boolean  @default(false)
  project        Project  @relation(fields: [projectId], references: [id])
}

model Risk {
  id            String   @id @default(cuid())
  projectId     String
  description   String
  category      String
  probability   Decimal  @db.Decimal(6, 4)
  impactCost    Decimal? @db.Decimal(12, 2)
  impactDays    Int?
  impactQuality Int?
  score         Decimal  @db.Decimal(12, 4)
  mitigation    String?
  trigger       String?
  status        String
  project       Project  @relation(fields: [projectId], references: [id])

  @@index([projectId, status, score(sort: Desc)])
}

model Meeting {
  id                    String    @id @default(cuid())
  projectId             String
  date                  DateTime
  participantContactIds String[]
  type                  String
  agenda                String?
  notes                 String?
  decisionIds           String[]
  actionTaskIds         String[]
  nextMeetingDate       DateTime?
  project               Project   @relation(fields: [projectId], references: [id])
}

model Invoice {
  id               String        @id @default(cuid())
  projectId        String
  contractorUserId String
  contactId        String
  budgetItemId     String?
  amount           Decimal       @db.Decimal(12, 2)
  tax              Decimal?      @db.Decimal(12, 2)
  status           InvoiceStatus
  filePath         String
  notes            String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  paidAt           DateTime?
  project          Project       @relation(fields: [projectId], references: [id])
}

model UserModuleAccess {
  userId     String
  projectId  String
  module     Module
  canView    Boolean @default(false)
  canEdit    Boolean @default(false)
  canUpload  Boolean @default(false)
  canRequest Boolean @default(false)
  project    Project @relation(fields: [projectId], references: [id])

  @@id([userId, projectId, module])
}

model ProjectMember {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  role      Role     // Project-level role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  
  @@unique([projectId, userId])
  @@index([userId])
  @@index([projectId])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  entity    String
  entityId  String
  meta      Json
  createdAt DateTime @default(now())
}

// ============ BIDDING MODELS ============

model Rfp {
  id            String           @id @default(cuid())
  projectId     String
  title         String
  description   String?
  dueAt         DateTime
  status        RfpStatus        @default(DRAFT)
  createdBy     String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  project       Project          @relation(fields: [projectId], references: [id])
  items         RfpItem[]
  invitations   BidInvitation[]
  bids          Bid[]
  award         Award?
  commitments   Commitment[]

  @@index([projectId, status])
  @@unique([projectId, title])
}

model RfpItem {
  id             String         @id @default(cuid())
  rfpId          String
  workPackageId  String?        // Link to work package
  specCode       String
  description    String
  qty            Decimal        @db.Decimal(12, 2)
  uom            UnitOfMeasure
  isAlternate    Boolean        @default(false)
  alternateGroup String?        // Group alternates together
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  rfp            Rfp            @relation(fields: [rfpId], references: [id], onDelete: Cascade)
  workPackage    WorkPackage?   @relation(fields: [workPackageId], references: [id])
  bidItems       BidItem[]

  @@index([rfpId])
  @@index([workPackageId])
}

model Vendor {
  id               String          @id @default(cuid())
  projectId        String
  name             String
  email            String
  phone            String?
  primaryContactId String?         // Link to Contact who this vendor represents
  status           VendorStatus    @default(ACTIVE)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  project          Project         @relation(fields: [projectId], references: [id])
  primaryContact   Contact?        @relation("ContactVendor", fields: [primaryContactId], references: [id])
  invitations      BidInvitation[]
  bids             Bid[]
  users            VendorUser[]
  commitments      Commitment[]

  @@unique([projectId, email])
  @@index([projectId, status])
}

model BidInvitation {
  id          String           @id @default(cuid())
  rfpId       String
  vendorId    String
  contactId   String?          // Track which contact was invited
  token       String           @unique @default(cuid())
  expiresAt   DateTime
  status      InvitationStatus @default(SENT)
  viewedAt    DateTime?
  respondedAt DateTime?
  emailSentAt DateTime?
  reminderSentAt DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  rfp         Rfp              @relation(fields: [rfpId], references: [id], onDelete: Cascade)
  vendor      Vendor           @relation(fields: [vendorId], references: [id])
  contact     Contact?         @relation(fields: [contactId], references: [id])

  @@unique([rfpId, vendorId])
  @@index([token])
  @@index([expiresAt])
}

model Bid {
  id          String          @id @default(cuid())
  rfpId       String
  vendorId    String
  submittedAt DateTime?
  totalAmount Decimal?        @db.Decimal(18, 2)
  status      BidStatus       @default(DRAFT)
  notes       String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  rfp         Rfp             @relation(fields: [rfpId], references: [id], onDelete: Cascade)
  vendor      Vendor          @relation(fields: [vendorId], references: [id])
  items       BidItem[]
  adjustments BidAdjustment[]
  attachments BidAttachment[]
  award       Award?
  commitment  Commitment?

  @@unique([rfpId, vendorId])
  @@index([rfpId, vendorId, status])
}

model BidItem {
  id          String         @id @default(cuid())
  bidId       String
  rfpItemId   String
  uom         UnitOfMeasure  // Unit of measure for this bid item
  unitPrice   Decimal        @db.Decimal(18, 4)
  totalPrice  Decimal        @db.Decimal(18, 2)
  notes       String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  bid         Bid            @relation(fields: [bidId], references: [id], onDelete: Cascade)
  rfpItem     RfpItem        @relation(fields: [rfpItemId], references: [id])

  @@unique([bidId, rfpItemId])
  @@index([bidId])
}

model BidAttachment {
  id          String    @id @default(cuid())
  bidId       String
  fileName    String
  storagePath String    // Firebase Storage path
  contentType String
  size        Int       // File size in bytes
  createdAt   DateTime  @default(now())

  bid         Bid       @relation(fields: [bidId], references: [id], onDelete: Cascade)

  @@index([bidId])
}

model Attachment {
  id          String              @id @default(cuid())
  ownerType   AttachmentOwnerType
  ownerId     String
  filename    String
  mime        String
  size        Int
  contentHash String              // SHA256 hash for deduplication
  urlOrPath   String
  createdBy   String
  createdAt   DateTime            @default(now())
  
  // Note: Relations are managed programmatically based on ownerType
  // No direct foreign key constraints to allow flexible ownership
  
  @@index([ownerType, ownerId])
  @@index([contentHash])
}

model Award {
  id                String       @id @default(cuid())
  rfpId             String       @unique
  winningBidId      String?      @unique
  awardedBy         String?
  awardedAt         DateTime?
  totalAwardAmount  Decimal?     @db.Decimal(18, 2)
  memo              String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  rfp               Rfp          @relation(fields: [rfpId], references: [id])
  winningBid        Bid?         @relation(fields: [winningBidId], references: [id])
  commitments       Commitment[]
}

model TaskDependency {
  id                String         @id @default(cuid())
  dependentTaskId   String
  predecessorTaskId String
  type              DependencyType @default(FINISH_TO_START)
  lagDays           Int            @default(0)
  createdAt         DateTime       @default(now())
  dependentTask     Task           @relation("DependentTask", fields: [dependentTaskId], references: [id], onDelete: Cascade)
  predecessorTask   Task           @relation("PredecessorTask", fields: [predecessorTaskId], references: [id], onDelete: Cascade)

  @@unique([dependentTaskId, predecessorTaskId])
  @@index([dependentTaskId])
  @@index([predecessorTaskId])
}

model TaskAttachment {
  id         String   @id @default(cuid())
  taskId     String
  fileName   String
  fileUrl    String
  fileSize   Int
  mimeType   String
  uploadedBy String
  uploadedAt DateTime @default(now())
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
}

model TaskComment {
  id          String   @id @default(cuid())
  taskId      String
  content     String
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  mentions    String[] @default([])
  attachments String[] @default([])
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId, createdAt(sort: Desc)])
}

model TaskWatcher {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
  @@index([taskId])
  @@index([userId])
}

model TaskPhoto {
  id           String   @id @default(cuid())
  taskId       String
  originalUrl  String
  thumbnailUrl String
  mediumUrl    String
  latitude     Float?
  longitude    Float?
  takenAt      DateTime
  deviceInfo   String?
  annotations  Json?
  uploadedBy   String
  createdAt    DateTime @default(now())
  task         Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
}

model TaskActivity {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  action    String
  details   Json?
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId, createdAt(sort: Desc)])
}

model TaskChecklistItem {
  id          String    @id @default(cuid())
  taskId      String
  title       String
  isCompleted Boolean   @default(false)
  completedBy String?
  completedAt DateTime?
  order       Int
  createdAt   DateTime  @default(now())
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId, order])
}

model RFI {
  id          String        @id @default(cuid())
  projectId   String
  rfiNumber   String        @unique
  subject     String
  question    String
  status      String
  priority    String
  submittedBy String
  submittedAt DateTime
  respondBy   DateTime?
  response    String?
  respondedAt DateTime?
  attachments String[]      @default([])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  taskLinks   RFITaskLink[]

  @@index([projectId, status])
  @@index([rfiNumber])
}

model RFITaskLink {
  id        String   @id @default(cuid())
  rfiId     String
  taskId    String
  createdAt DateTime @default(now())
  rfi       RFI      @relation(fields: [rfiId], references: [id], onDelete: Cascade)
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([rfiId, taskId])
  @@index([rfiId])
  @@index([taskId])
}

model Submittal {
  id              String              @id @default(cuid())
  projectId       String
  submittalNumber String              @unique
  title           String
  description     String?
  status          String
  submittedBy     String
  submittedAt     DateTime
  reviewBy        DateTime?
  approvedAt      DateTime?
  approvedBy      String?
  attachments     String[]            @default([])
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  taskLinks       SubmittalTaskLink[]

  @@index([projectId, status])
  @@index([submittalNumber])
}

model SubmittalTaskLink {
  id          String    @id @default(cuid())
  submittalId String
  taskId      String
  createdAt   DateTime  @default(now())
  submittal   Submittal @relation(fields: [submittalId], references: [id], onDelete: Cascade)
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([submittalId, taskId])
  @@index([submittalId])
  @@index([taskId])
}

model ChangeOrder {
  id             String                @id @default(cuid())
  projectId      String
  coNumber       String                @unique
  title          String
  description    String
  costImpact     Decimal               @db.Decimal(12, 2)
  scheduleImpact Int?
  status         String
  requestedBy    String
  requestedAt    DateTime
  approvedAt     DateTime?
  approvedBy     String?
  attachments    String[]              @default([])
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  taskLinks      ChangeOrderTaskLink[]

  @@index([projectId, status])
  @@index([coNumber])
}

model ChangeOrderTaskLink {
  id            String      @id @default(cuid())
  changeOrderId String
  taskId        String
  createdAt     DateTime    @default(now())
  changeOrder   ChangeOrder @relation(fields: [changeOrderId], references: [id], onDelete: Cascade)
  task          Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([changeOrderId, taskId])
  @@index([changeOrderId])
  @@index([taskId])
}

// ============ NEW BIDDING SYSTEM MODELS ============

model WorkPackage {
  id               String          @id @default(cuid())
  projectId        String
  code             String          // e.g., "03-CONC-001"
  name             String
  discipline       String
  csiDivision      String?         // CSI MasterFormat division
  baseBudgetItemId String?
  isAlternate      Boolean         @default(false)
  parentPackageId  String?
  sequenceOrder    Int             @default(0)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  project          Project         @relation(fields: [projectId], references: [id])
  baseBudgetItem   BudgetItem?     @relation(fields: [baseBudgetItemId], references: [id])
  parentPackage    WorkPackage?    @relation("PackageAlternates", fields: [parentPackageId], references: [id])
  alternates       WorkPackage[]   @relation("PackageAlternates")
  rfpItems         RfpItem[]
  commitments      Commitment[]

  @@unique([projectId, code])
  @@index([projectId, discipline])
  @@index([projectId, csiDivision])
}

model Commitment {
  id               String                  @id @default(cuid())
  projectId        String
  type             CommitmentType          // CONTRACT, PO, CHANGE_ORDER
  status           CommitmentStatus        // DRAFT, APPROVED, ACTIVE, COMPLETED, CANCELLED
  contractNumber   String?
  poNumber         String?
  vendorId         String
  originalAmount   Decimal                 @db.Decimal(18,2)
  currentAmount    Decimal                 @db.Decimal(18,2) // After change orders
  paidToDate       Decimal                 @db.Decimal(18,2) @default(0)
  retentionPercent Decimal?                @db.Decimal(5,2)
  retentionHeld    Decimal?                @db.Decimal(18,2) @default(0)
  workPackageId    String
  rfpId            String?
  bidId            String?                 @unique
  awardId          String?
  approvedAt       DateTime?
  approvedBy       String?
  idempotencyKey   String
  notes            String?
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt

  project          Project                 @relation(fields: [projectId], references: [id])
  vendor           Vendor                  @relation(fields: [vendorId], references: [id])
  workPackage      WorkPackage             @relation(fields: [workPackageId], references: [id])
  rfp              Rfp?                    @relation(fields: [rfpId], references: [id])
  bid              Bid?                    @relation(fields: [bidId], references: [id])
  award            Award?                  @relation(fields: [awardId], references: [id])
  changeOrders     CommitmentChangeOrder[]
  payments         PaymentApplication[]

  @@unique([projectId, idempotencyKey])
  @@unique([projectId, contractNumber])
  @@unique([poNumber])
  @@index([projectId, status])
  @@index([vendorId])
}

model BidAdjustment {
  id            String          @id @default(cuid())
  bidId         String
  type          AdjustmentType  // ADD, DEDUCT, ALTERNATE, ALLOWANCE, PLUG
  category      String          // SCOPE_ALIGNMENT, NORMALIZATION, CLARIFICATION
  label         String
  description   String?
  amount        Decimal         @db.Decimal(18,2)
  isAccepted    Boolean         @default(true)
  sequenceOrder Int             @default(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  bid           Bid             @relation(fields: [bidId], references: [id], onDelete: Cascade)

  @@index([bidId, type])
}

model VendorUser {
  id        String      @id @default(cuid())
  vendorId  String
  userId    String
  role      VendorRole  // OWNER, MANAGER, ESTIMATOR, VIEWER
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  vendor    Vendor      @relation(fields: [vendorId], references: [id])
  user      User        @relation(fields: [userId], references: [id])

  @@unique([vendorId, userId])
  @@index([userId])
}

model CommitmentChangeOrder {
  id           String      @id @default(cuid())
  commitmentId String
  coNumber     String
  description  String
  amount       Decimal     @db.Decimal(18,2)
  status       String      // PENDING, APPROVED, REJECTED
  approvedAt   DateTime?
  approvedBy   String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  commitment   Commitment  @relation(fields: [commitmentId], references: [id])

  @@unique([commitmentId, coNumber])
}

model PaymentApplication {
  id              String      @id @default(cuid())
  commitmentId    String
  paymentNumber   Int
  periodStart     DateTime
  periodEnd       DateTime
  workCompleted   Decimal     @db.Decimal(18,2)
  materialsStored Decimal     @db.Decimal(18,2) @default(0)
  retentionAmount Decimal     @db.Decimal(18,2) @default(0)
  netPayment      Decimal     @db.Decimal(18,2)
  status          String      // DRAFT, SUBMITTED, APPROVED, PAID
  submittedAt     DateTime?
  approvedAt      DateTime?
  paidAt          DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  commitment      Commitment  @relation(fields: [commitmentId], references: [id])

  @@unique([commitmentId, paymentNumber])
}

enum Role {
  ADMIN
  STAFF
  CONTRACTOR
  VIEWER
}

enum ScheduleType {
  CALL
  MEETING
  SITE_VISIT
  WORK
  EMAIL_FOLLOWUP
}

enum ScheduleStatus {
  REQUESTED
  PLANNED
  DONE
  CANCELED
  RESCHEDULE_NEEDED
}

enum BudgetStatus {
  BUDGETED
  COMMITTED
  PAID
}

enum ProcurementStatus {
  QUOTED
  ORDERED
  DELIVERED
  INSTALLED
  DRAFT
  APPROVED
  SHIPPED
  CANCELLED
}

enum InvoiceStatus {
  RECEIVED
  UNDER_REVIEW
  APPROVED
  PAID
  REJECTED
}

enum Module {
  TASKS
  SCHEDULE
  BUDGET
  PROCUREMENT
  CONTACTS
  PROJECTS
  PROPOSALS
  RFIS
  SUBMITTALS
  CHANGE_ORDERS
  SAFETY
  WEATHER
  PHOTOS
  PLANS
  UPLOADS
  INVOICES
  PROCUREMENT_READ
  DOCS_READ
  BIDDING
}

enum ProjectType {
  NEW_CONSTRUCTION
  RENOVATION
  ADDITION
  COMMERCIAL
  RESIDENTIAL
  MIXED_USE
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  BLOCKED
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
  CRITICAL
}

enum DependencyType {
  FINISH_TO_START
  START_TO_START
  FINISH_TO_FINISH
  START_TO_FINISH
}

enum RfpStatus {
  DRAFT
  PUBLISHED
  CLOSED
}

enum VendorStatus {
  ACTIVE
  INVITED
  BLOCKED
}

enum BidStatus {
  DRAFT
  SUBMITTED
  WITHDRAWN
}

enum AttachmentOwnerType {
  RFP
  BID
}

enum UnitOfMeasure {
  EA    // Each
  LF    // Linear Feet
  SF    // Square Feet
  CY    // Cubic Yard
  CF    // Cubic Feet
  TON   // Ton
  LB    // Pound
  GAL   // Gallon
  HR    // Hour
  DAY   // Day
  LS    // Lump Sum
  LOT   // Lot
}

// ============ NEW BIDDING SYSTEM ENUMS ============

enum CommitmentType {
  CONTRACT
  PO
  CHANGE_ORDER
}

enum CommitmentStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum AdjustmentType {
  ADD
  DEDUCT
  ALTERNATE
  ALLOWANCE
  PLUG
  NORMALIZATION
}

enum VendorRole {
  OWNER
  MANAGER
  ESTIMATOR
  VIEWER
}

enum InvitationStatus {
  SENT
  VIEWED
  RESPONDED
  EXPIRED
  CANCELLED
}

// ============ USER PREFERENCES SYSTEM ============

model UserPreferences {
  id                String    @id @default(cuid())
  userId            String    @unique
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Navigation & Interface
  mobileNavItems    Json      @default("[\"home\", \"tasks\", \"schedule\"]") // Which 3 items to show
  navItemOrder      Int[]     @default([0, 1, 2]) // Order of navigation items
  quickActions      Json      @default("[]") // FAB menu customization
  dashboardWidgets  Json      @default("[]") // Dashboard widget configuration
  favoritePages     String[]  @default([]) // Quick access pages

  // Appearance & Theme
  theme             String    @default("dark") // dark/light/auto
  themeCustom       Json?     // Custom theme colors
  density           String    @default("comfortable") // compact/comfortable/spacious
  fontSize          String    @default("medium") // small/medium/large/xl
  highContrast      Boolean   @default(false)
  reduceMotion      Boolean   @default(false)
  colorBlindMode    String?   // protanopia/deuteranopia/tritanopia

  // Display Preferences
  showCompleted     Boolean   @default(false)
  defaultView       String    @default("card") // card/list/table
  itemsPerPage      Int       @default(20)
  defaultProjectId  String?   // Default project to load
  language          String    @default("en")
  timezone          String    @default("America/New_York")
  dateFormat        String    @default("MM/DD/YYYY")
  timeFormat        String    @default("12h") // 12h/24h

  // Notifications
  emailNotifications    Boolean  @default(true)
  pushNotifications     Boolean  @default(false)
  smsNotifications      Boolean  @default(false)
  notificationSettings  Json     @default("{}") // Granular per-module settings
  digestFrequency       String   @default("daily") // never/daily/weekly
  quietHours            Json?    // {start: "22:00", end: "08:00"}

  // Privacy & Security
  profileVisibility     String   @default("team") // public/team/private
  activityStatus        Boolean  @default(true)
  twoFactorMethod       String?  // sms/app/email
  trustedDevices        Json     @default("[]") // Device fingerprints
  sessionTimeout        Int      @default(10080) // Minutes (1 week default)

  // Mobile-specific
  swipeActions          Boolean  @default(true)
  hapticFeedback        Boolean  @default(true)
  biometricAuth         Boolean  @default(false)
  offlineMode           Boolean  @default(true)
  dataSaver             Boolean  @default(false)

  // Integrations
  connectedServices     Json     @default("[]") // OAuth connections
  apiKeys               Json     @default("[]") // Personal API keys (encrypted)
  webhooks              Json     @default("[]") // Webhook configurations
  calendarSync          Json?    // Calendar integration settings

  // Advanced
  debugMode             Boolean  @default(false)
  betaFeatures          Boolean  @default(false)
  featureFlags          Json?    // Override feature flags
  customShortcuts       Json?    // Keyboard shortcuts

  // Metadata
  onboardingCompleted   Boolean  @default(false)
  tourCompleted         Json     @default("{}")
  lastSettingsUpdate    DateTime @updatedAt
  createdAt             DateTime @default(now())

  @@index([userId])
}

model SettingsChangeLog {
  id            String   @id @default(cuid())
  userId        String
  setting       String   // Which setting was changed
  oldValue      Json?    // Previous value
  newValue      Json     // New value
  ipAddress     String?  // For security tracking
  userAgent     String?  // Device info
  timestamp     DateTime @default(now())

  @@index([userId, timestamp])
}

model SettingsPreset {
  id            String   @id @default(cuid())
  name          String   // Preset name
  description   String?  // Description
  type          String   // system/team/personal
  settings      Json     // Preset configuration
  isDefault     Boolean  @default(false)
  isPublic      Boolean  @default(false)
  createdBy     String?  // User who created it
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([name, type])
  @@index([type, isPublic])
}
